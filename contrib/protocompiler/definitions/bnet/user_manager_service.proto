import "bnet/attribute.proto";
import "bnet/entity.proto";
import "bnet/rpc.proto";

package bnet.protocol.user_manager;

option cc_generic_services = false;

message RecentPlayer
{
    required .bnet.protocol.EntityId entity = 1;
    optional string program_id = 2;
    optional fixed64 timestamp_played = 3;
    repeated .bnet.protocol.attribute.Attribute attributes = 4;
    optional fixed32 id = 5 [default = 0];
    optional fixed32 counter = 6 [default = 0];
}

message SubscribeToUserManagerRequest
{
    required uint64 object_id = 1;
}

message SubscribeToUserManagerResponse
{
    repeated .bnet.protocol.EntityId blocks = 1;
    repeated .bnet.protocol.user_manager.RecentPlayer recent_players = 2;
}

message AddRecentPlayersRequest
{
    repeated .bnet.protocol.user_manager.RecentPlayer players = 1;
}

message AddRecentPlayersResponse
{
    repeated .bnet.protocol.user_manager.RecentPlayer players_added = 1;
    repeated fixed32 players_removed = 3;
}

message ClearRecentPlayersResponse
{
    repeated fixed32 players_removed = 1;
}

message BlockEntityRequest
{
    required .bnet.protocol.EntityId entity = 1;
}

message BlockEntityResponse
{
    optional .bnet.protocol.EntityId blocked_entity = 1;
}

message UnblockEntityRequest
{
    required .bnet.protocol.EntityId entity = 1;
}

message UnblockEntityResponse
{
    optional .bnet.protocol.EntityId unblocked_entity = 1;
}

message ClearBlockListResponse
{
    repeated .bnet.protocol.EntityId unblocked_entity = 1;
}

message EntityBlockedNotification
{
    repeated .bnet.protocol.EntityId blocked_entities = 1;
}

message EntityUnblockedNotification
{
    repeated .bnet.protocol.EntityId unblocked_entities = 1;
}

message RecentPlayersAddedNotification
{
    repeated .bnet.protocol.user_manager.RecentPlayer added_players = 1;
}

message RecentPlayersRemovedNotification
{
    repeated .bnet.protocol.user_manager.RecentPlayer removed_players = 1;
}

service UserManagerService
{
    rpc SubscribeToUserManager(.bnet.protocol.user_manager.SubscribeToUserManagerRequest) returns(.bnet.protocol.user_manager.SubscribeToUserManagerResponse)
    {
        option (method_id) = 1;
    }
    rpc AddRecentPlayers(.bnet.protocol.user_manager.AddRecentPlayersRequest) returns(.bnet.protocol.user_manager.AddRecentPlayersResponse)
    {
        option (method_id) = 10;
    }
    rpc ClearRecentPlayers(.bnet.protocol.NoData) returns(.bnet.protocol.user_manager.ClearRecentPlayersResponse)
    {
        option (method_id) = 11;
    }
    rpc BlockEntity(.bnet.protocol.user_manager.BlockEntityRequest) returns(.bnet.protocol.user_manager.BlockEntityResponse)
    {
        option (method_id) = 20;
    }
    rpc UnblockEntity(.bnet.protocol.user_manager.UnblockEntityRequest) returns(.bnet.protocol.user_manager.UnblockEntityResponse)
    {
        option (method_id) = 21;
    }
    rpc ClearBlockList(.bnet.protocol.NoData) returns(.bnet.protocol.user_manager.ClearBlockListResponse)
    {
        option (method_id) = 22;
    }
    rpc BlockEntityForSession(.bnet.protocol.user_manager.BlockEntityRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 40;
    }
    rpc LoadBlockList(.bnet.protocol.EntityId) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 50;
    }
}

service UserManagerNotify
{
    rpc NotifyEntityBlocked(.bnet.protocol.user_manager.EntityBlockedNotification) returns(.bnet.protocol.NO_RESPONSE)
    {
        option (method_id) = 1;
    }
    rpc NotifyEntityUnblocked(.bnet.protocol.user_manager.EntityUnblockedNotification) returns(.bnet.protocol.NO_RESPONSE)
    {
        option (method_id) = 2;
    }
    rpc NotifyRecentPlayersAdded(.bnet.protocol.user_manager.RecentPlayersAddedNotification) returns(.bnet.protocol.NO_RESPONSE)
    {
        option (method_id) = 11;
    }
    rpc NotifyRecentPlayersRemoved(.bnet.protocol.user_manager.RecentPlayersRemovedNotification) returns(.bnet.protocol.NO_RESPONSE)
    {
        option (method_id) = 12;
    }
}

